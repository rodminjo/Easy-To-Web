package com.backend.easy_to_web.test_support.mock.account.handler.infrastructure;

import com.backend.easy_to_web.account.domain.model.RefreshToken;
import com.backend.easy_to_web.account.domain.port.out.RefreshTokenRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {

  private final AtomicLong autoGeneratedId = new AtomicLong(0);
  private final List<RefreshToken> data = Collections.synchronizedList(new ArrayList<>());


  @Override
  public List<RefreshToken> getAllByAccountId(String accountId) {
    List<RefreshToken> list = findAllByAccountId(accountId);
    if (list.isEmpty()) {
      throw new IllegalArgumentException("Not Found");
    }

    return list;
  }

  @Override
  public List<RefreshToken> findAllByAccountId(String accountId) {
    return data.stream()
        .filter(refreshToken -> refreshToken.getAccountId().equals(accountId))
        .toList();
  }


  @Override
  public RefreshToken save(RefreshToken refreshToken) {
    if (refreshToken.getId() == 0) {
      RefreshToken newToken = RefreshToken.builder()
          .id(autoGeneratedId.incrementAndGet())
          .accountId(refreshToken.getAccountId())
          .token(refreshToken.getToken())
          .userAgent(refreshToken.getUserAgent())
          .userIp(refreshToken.getUserIp())
          .build();

      data.add(newToken);
      return newToken;

    } else {
      data.removeIf(item -> Objects.equals(item.getId(), refreshToken.getId()));
      data.add(refreshToken);
      return refreshToken;

    }
  }

  @Override
  public void deleteById(long id) {
    List<RefreshToken> target = data.stream()
        .filter(refreshToken -> refreshToken.getId() == id)
        .toList();
    data.removeAll(target);
  }
}
